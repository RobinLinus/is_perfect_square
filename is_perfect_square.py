# See also https://stackoverflow.com/questions/2489435/check-if-a-number-is-a-perfect-square/45724520#45724520
# https://math.stackexchange.com/questions/131330/detecting-perfect-squares-faster-than-by-extracting-square-root/712818#712818

def is_perfect_square(n):
	# We need a random prime p such that:
	# 	1) p > n
	#	2) p mod 4 == 3 ( makes it easy to calculate mod_sqrt(n,p) )

	# p is 32 bit (default)
	p = 4290747299

	if p < n:
		# p is 64 bit 
		p = 10177864232367814547
		
	if p < n:
		# p is 128 bit 
		p = 0xde9c745d49521a010ed328f7d828ac7b	

	if p < n:
		# p is 256 bit 
		p = 0x91df267127e42745ea08d3b0c223ad2adf9f677cd02a559532bd89042877a743

	if p < n:
		# p is 512 bit 
		p = 0x00cc49978de95bdd07cbedfe90e58d05ca4d3766728e3abe900a30dbf0830c7831328c6d67878dae07e211898dccba6b4274857a09b648e6361c4c4e8faddb698b

	if p < n:
		# p is 1028 bit 
		p = 0x00f553cc95ff1166c964f34471645b78c43089914c7d1d67f82ade331fb88ba934fedcca0a0c2042dcd8098c298a05a45f06f1c371d2add54f434703876a2e5447676592529ac9e5d3e138a65183c0edbae5b873d5dbbec0f19d7b36c0790532fa489cd58a4ee91983320ff8bbf0d5148b91a29820fb7784b653a5008b69c86f73

	if p < n:
		# p is 4096 bit 
		p = 0x


	assert p % 4 == 3
	assert p > n

	# Step 1: calculate the "positive" square root of n modulo p
	sqrtN = pow(n, (p+1)/4, p)

	# Step 2: check if any modular square root is also an integer root
	
	if sqrtN > n :
		# Try the "negative" square root of n modulo p
		sqrtN = p - sqrtN

	# Verify the square root 
	return sqrtN * sqrtN == n 
	


#
# Test
# 

assert is_perfect_square(152415789666209426002111556165263283035677489)
assert not is_perfect_square(152415789666209426002111556165263283035677490)
# assert is_perfect_square(0x514e03026b9bae09a6235cec535cdb8d1fa9d8793b3537959e5899eeeb35cca144e5ff0188edeac6356f2492b875787b2695b24d5c2ccc14996228f84f1040ad666b28d35d9bc1ee00aee7fee8e7b0f7ce55b7272925c6f0a89580520a3363206900050dd98f03afbad5c65e9c777f1e34e221e746ab126195ffc5f46017dc650ab2738db14b5e18af5bf18b46737b6b43dbf1616e4d524097e8ff9c7af02c4540bfedad710ad6e61a0e3379cf0326fbf6cd4b96118740a9e13f52f28cadfe72d694e9ac8e0f27cbf74e4f4b2dd312e292e81c394a95503bb289b182d6442b72176d290912f4d38bcfde0da0ce2d2e39daf9584325c1d57a93949c95d340d581913aefac1b9014657082c080333282bb4a71aee1ff518915f5e480188b93a0051ad3501a9725296733db3708d0f3243ebe6959eb64a390b05fd15a2d080d9b52d99e7f0d10cbdfc50a6dc2eef3d45fbcbde8c6cdbac06a7c7d183e9c675e46cd0370a30e5ca5bb0cb6293141a9ce98cbdfd857f9268386c2420c865f2cf034d1a58fe551e53c4d161744df97c7ed1ff8ebd8206b07abc9b2a820c47b92c51dcfdbaeaaf4042dc39043a00b197888531accb87d4ebb574f8f2abf9e66fa0359b9c8f9fbdb2e98c5443c25ce893139093811b41f1c06a7864c3beeb00fa1590eab42b965865254a48d0bd6bd00a3738422bf07b958cf1c1452ee3ea9f32e8b8d2d414f33aca0cd208775bc97f2ebc3fcbc065b5cdb4a630636cecf59d6ba0ec2f7293ad9966f776d2a19d6e51c02b9c09b762a523424e1cf7a2777268a124167a0a831a6290df1bf238d1f33ee8641e2f67d4d23edcd64973c522d4bb0f6c418fe6728d5e5b7afc644d5e65aada391b37b61278a54c8652e3bfba3f89692a304f98ec3c1)

def test():
	import math
	N = 10000
	print
	print 'Testing first '+str(N)+' perfect squares for false negatives'
	for i in range(N):
		assert is_perfect_square(i*i)
	print '>> Found no false negatives'
	print 
	N = 1000000
	print 'Testing first '+str(N)+' integers for false positives'
	for i in range(2,N):
		if is_perfect_square(i):
			sqrt = math.sqrt(i)
			assert sqrt * sqrt == i
	print '>> Found no false positives'
	print 

if __name__ == "__main__":
    test()
